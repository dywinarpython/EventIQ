from concurrent.futures import ThreadPoolExecutor, TimeoutError
from API.gpt_api_generate.generate_responce_gpt import request_in_a_clear_way
from API.yandex_search.search_yandex import main_search


def searh_place_with_responce_gpt(event, where_event, wish):
    with ThreadPoolExecutor(max_workers=1) as executor:
        future = executor.submit(_search_task, event, where_event, wish)
        try:
            return future.result(timeout=60)
        except TimeoutError:
            return {'text': '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ', 'result': '–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∏–ª–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –æ—á–µ—Ä–µ–¥—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.'}


def _search_task(event, where_event, wish):
    try:
        event_info = main_search(event, where_event)
        assert event_info, '–ü–æ–∏—Å–∫ –±—ã–ª –Ω–µ —É—Å–ø–µ—à–µ–Ω'
        response_gpt = request_in_a_clear_way(event, event_info, wish)
        assert response_gpt, '–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –¥–∞–ª–∞ –æ—Ç–≤–µ—Ç'
        return {'event_name': event, 'event': event_info, 'response_gpt': response_gpt}
    except Exception as e:
        print(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        return {"text": "–ó–∞–ø—Ä–æ—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫–µ–Ω", "result": "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –º—ã –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å üòî."}


if __name__ == '__main__':
    content = searh_place_with_responce_gpt(
        '–ú–∞—Å–ª–µ–Ω–∏—Ü–∞', '–®–∞—Ö—Ç—ã', wish=None)
    print(content)
